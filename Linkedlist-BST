# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
        
            
            
    def sortedListToBST(self, head: ListNode) -> TreeNode:
        temp=head
        count=0
        l=[]
        if head==None:
            return None
        while temp!=None:
            l.append(temp.val)
            temp=temp.next
       
        def convertBST(left,right):
            if left>right:
                return None
            mid=(left+right)//2
            root=TreeNode(l[mid])
            if left==right:
                return root
            root.left=convertBST(left,mid-1)
            root.right=convertBST(mid+1,right)
            return root
        return convertBST(0,len(l)-1)
        
                
    
