# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isValidBST(self, root: TreeNode) -> bool:
        m=float("-inf")
        n=float("inf")
        if root!=None:
            if self.find_max(root.left)<root.val and self.find_min(root.right)>root.val:
                if self.isValidBST(root.left) and self.isValidBST(root.right):
                    return True
                else:
                    return False
            else:
                return False
            
        else:
            return True
    def find_max(self,root):
        if root!=None:
            maxleft=self.find_max(root.left)
            maxright=self.find_max(root.right)
            return max(maxleft,root.val,maxright)
        else:
            return float("-inf")
    def find_min(self,root):
        if root!=None:
            minleft=self.find_min(root.left)
            minright=self.find_min(root.right)
            return min(minleft,root.val,minright)
        else:
            return float("inf")
       
